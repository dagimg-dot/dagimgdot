---
import Head from "@components/Head.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { SITE } from "@consts";

type Props = {
  title: string;
  description: string;
};

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <Head title={`${title} | ${SITE.NAME}`} description={description} />
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <div id="fullscreen-container"></div>
  </body>
</html>

<style is:global>
  #fullscreen-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  #fullscreen-container.active {
    pointer-events: auto;
    opacity: 1;
  }

  .fullscreen-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .fullscreen-image {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    opacity: 0;
    transform: scale(0.9);
    transition:
      opacity 0.3s ease-in-out,
      transform 0.3s ease-in-out;
  }

  .fullscreen-image.active {
    opacity: 1;
    transform: scale(1);
  }

  .hidden {
    display: none;
  }

  .navigation-hint {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 14px;
    pointer-events: none;
    opacity: 0;
    animation: fadeInHint 0.5s ease-in-out 1s forwards;
  }

  @keyframes fadeInHint {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }
</style>

<script>
  let fullscreenContainer: HTMLDivElement | null = null;
  let currentImageIndex = 0;
  let allImages: { src: string; alt: string }[] = [];

  function openFullscreen(src: string, alt: string) {
    // Find the current image index
    currentImageIndex = allImages.findIndex((img) => img.src === src);

    if (fullscreenContainer) {
      fullscreenContainer.innerHTML = `
        <div class="fullscreen-overlay">
          <img src="${src}" alt="${alt}" class="fullscreen-image">
          ${
            allImages.length > 1
              ? `
            <div class="navigation-hint">
              Use ← → arrow keys to navigate
            </div>
          `
              : ""
          }
        </div>
      `;
      fullscreenContainer.classList.add("active");
      setTimeout(() => {
        const fullscreenImage =
          fullscreenContainer?.querySelector(".fullscreen-image");
        fullscreenImage?.classList.add("active");
      }, 50);
    }
  }

  function navigateToImage(direction: "prev" | "next") {
    if (allImages.length <= 1) {
      return;
    }

    if (direction === "prev") {
      currentImageIndex =
        currentImageIndex > 0 ? currentImageIndex - 1 : allImages.length - 1;
    } else {
      currentImageIndex =
        currentImageIndex < allImages.length - 1 ? currentImageIndex + 1 : 0;
    }

    const currentImage = allImages[currentImageIndex];

    if (fullscreenContainer) {
      const fullscreenImage =
        fullscreenContainer.querySelector(".fullscreen-image");
      if (fullscreenImage) {
        fullscreenImage.setAttribute("src", currentImage.src);
        fullscreenImage.setAttribute("alt", currentImage.alt);
      }
    }
  }

  function closeFullscreen() {
    if (fullscreenContainer) {
      const fullscreenImage =
        fullscreenContainer.querySelector(".fullscreen-image");
      fullscreenImage?.classList.remove("active");
      fullscreenContainer.classList.remove("active");
      setTimeout(() => {
        fullscreenContainer!.innerHTML = "";
      }, 300);
    }
  }

  function setupImagePreviews() {
    fullscreenContainer = document.getElementById(
      "fullscreen-container"
    ) as HTMLDivElement;

    // Collect all images on the page
    const imageElements = document.querySelectorAll(".preview-image");
    allImages = Array.from(imageElements).map((img) => ({
      src: img.getAttribute("src") || "",
      alt: img.getAttribute("alt") || "",
    }));

    // Add event listeners
    document.addEventListener("click", handleClick);
    document.addEventListener("keydown", handleKeydown);
  }

  // Clean up event listeners before reinitializing on page transition
  function cleanUp() {
    // Remove the specific event handlers
    document.removeEventListener("click", handleClick);
    document.removeEventListener("keydown", handleKeydown);
    if (fullscreenContainer) {
      fullscreenContainer.innerHTML = "";
      fullscreenContainer.classList.remove("active");
    }
  }

  // Define event handlers outside of setupImagePreviews
  function handleClick(event: Event) {
    const target = event.target as HTMLElement;
    if (target.classList.contains("preview-image")) {
      openFullscreen(
        target.getAttribute("src") || "",
        target.getAttribute("alt") || ""
      );
    } else if (
      fullscreenContainer &&
      (target === fullscreenContainer ||
        target.classList.contains("fullscreen-overlay"))
    ) {
      closeFullscreen();
    }
  }

  function handleKeydown(event: KeyboardEvent) {
    if (fullscreenContainer?.classList.contains("active")) {
      if (event.key === "Escape") {
        closeFullscreen();
      } else if (event.key === "ArrowLeft") {
        event.preventDefault();
        navigateToImage("prev");
      } else if (event.key === "ArrowRight") {
        event.preventDefault();
        navigateToImage("next");
      }
    }
  }

  // Reinitialize setup on page load and Astro page transition
  document.addEventListener("DOMContentLoaded", setupImagePreviews);
  document.addEventListener("astro:page-load", () => {
    cleanUp();
    setupImagePreviews();
  });
</script>
